name: CI

on:
  push:
  #i have "strict" check rules, so this is redundant as the branch must be up-to-date to merge
  pull_request:
  workflow_dispatch:
  schedule: [cron: "40 1 * * *"]

permissions:
  contents: read

env:
  #RUSTFLAGS: -Dwarnings
  CARGO_INCREMENTAL: 0 # on large changes this just bloats ./target
  RUST_BACKTRACE: short
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  pre_ci:
    uses: valeratrades/.github/.github/workflows/pre_ci.yml@master

  test:
    name: Rust ${{matrix.rust}}
    needs: pre_ci
    if: needs.pre_ci.outputs.continue
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [nightly] # dtolnay had [stable, beta, nightly, stable 1.45]
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{matrix.rust}}
      # test this works
      - name: Set RUSTFLAGS for release branch
        run: echo "RUSTFLAGS=-Dwarnings" >> $GITHUB_ENV
        if: github.ref == 'refs/heads/release'
      - name: Enable type layout randomization
        run: echo RUSTFLAGS=${RUSTFLAGS}\ -Zrandomize-layout\ --cfg=exhaustive >> $GITHUB_ENV
        if: matrix.rust == 'nightly'
      # not sure why dtolnay has this
      #- run: cargo check --locked
      - run: cargo update
      - run: cargo check
      - run: cargo test
      #TODO: figure this out
      #  if: matrix.os == 'ubuntu' && matrix.rust == 'nightly'
      #- run: cargo run -- expand --manifest-path tests/Cargo.toml > expand.rs && diff tests/lib.expand.rs expand.rs

  doc:
    name: Documentation
    needs: pre_ci
    if: needs.pre_ci.outputs.continue
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      RUSTDOCFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: dtolnay/install@cargo-docs-rs
      - run: cargo docs-rs

  #miri:
  #  name: Miri
  #  needs: pre_ci
  #  if: needs.pre_ci.outputs.continue
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 45
  #  steps:
  #    - uses: actions/checkout@v4
  #    - uses: dtolnay/rust-toolchain@miri
  #    - run: cargo miri setup
  #    - run: cargo miri test
  #      env:
  #        MIRIFLAGS: -Zmiri-strict-provenance

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@clippy
      - run: cargo clippy --tests -- -Dclippy::all
      #-Dclippy::pedantic

  check-and-merge:
    needs: build
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check last comment for +r
      id: check_comment
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
          });
          const lastComment = comments[comments.length - 1];
          return lastComment.body.trim() === '+r';

    - name: Set up Git credentials
      if: steps.check_comment.outputs.result == 'true'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Merge to master
      if: steps.check_comment.outputs.result == 'true'
      run: |
        git checkout master
        git merge protocol_orders_switch_to_vec
        git push origin master
